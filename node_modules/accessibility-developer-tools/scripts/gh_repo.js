(function() {
  var GHRepo, Promise, request;

  request = require('superagent');

  Promise = require('bluebird');

  module.exports = GHRepo = (function() {
    function GHRepo(config) {
      this.config = config != null ? config : {};
      this.baseUrl = "https://api.github.com/repos/" + this.config.repo;
    }

    GHRepo.prototype._buildRequest = function(req) {
      return req.auth(this.config.username, this.config.password).set('Accept', 'application/vnd.github.v3').set('User-Agent', 'grunt');
    };

    GHRepo.prototype.log = function() {
      return console.log.apply(console, arguments);
    };

    GHRepo.prototype.getReleaseByTagName = function(tag) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.log('GET', _this.baseUrl + "/releases/tags/" + tag);
          return _this._buildRequest(request.get(_this.baseUrl + "/releases/tags/" + tag)).end(function(err, res) {
            if (res.statusCode === 404) {
              return resolve();
            }
            if (err != null) {
              return reject(err);
            }
            if (res.statusCode !== 200) {
              return reject("Request failed");
            }
            return resolve(res.body);
          });
        };
      })(this));
    };

    GHRepo.prototype.getReleases = function(tag) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.log('GET', _this.baseUrl + "/releases");
          return _this._buildRequest(request.get(_this.baseUrl + "/releases")).end(function(err, res) {
            if (res.statusCode === 404) {
              return resolve();
            }
            if (err != null) {
              return reject(err);
            }
            if (res.statusCode !== 200) {
              return reject("Request failed");
            }
            return resolve(res.body);
          });
        };
      })(this));
    };

    GHRepo.prototype.updateRelease = function(release, payload) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.log('PATCH', _this.baseUrl + "/releases/" + release.id);
          return _this._buildRequest(request.patch(_this.baseUrl + "/releases/" + release.id)).send(payload).end(function(err, res) {
            if (err != null) {
              return reject(err);
            }
            if (res.statusCode !== 200) {
              return reject("Request failed");
            }
            return resolve(res.body);
          });
        };
      })(this));
    };

    GHRepo.prototype.createRelease = function(payload) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.log('POST', _this.baseUrl + "/releases");
          return _this._buildRequest(request.post(_this.baseUrl + "/releases")).send(payload).end(function(err, res) {
            if (err != null) {
              return reject(err);
            }
            if (res.statusCode !== 201) {
              return reject("Request failed");
            }
            return resolve(res.body);
          });
        };
      })(this));
    };

    GHRepo.prototype.getReleaseByName = function(name) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.getReleases().then(function(releases) {
            var i, len, release;
            if (releases == null) {
              releases = [];
            }
            for (i = 0, len = releases.length; i < len; i++) {
              release = releases[i];
              if (release.name === name) {
                return resolve(release);
              }
            }
            return resolve();
          })["catch"](function(err) {
            return reject("Unable to fetch project releases.");
          });
        };
      })(this));
    };

    return GHRepo;

  })();

}).call(this);
